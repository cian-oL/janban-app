name: Deploy to EC2

on:
  push:
    branches:
      - main

  workflow_dispatch:

jobs:
  test_build_and_deploy:
    runs-on: ubuntu-latest

    # Add service containers for e2e testing
    services:
      mongodb:
        image: mongo:latest
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: example
        ports:
          - 27017:27017
        # Health check to ensure MongoDB is ready before tests run
        options: >-
          --health-cmd "echo 'db.runCommand({serverStatus:1}).ok' | mongosh admin -u root -p example --quiet | grep 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # === Runner Setup ===

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup nodejs
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      # === Unit Tests ===

      - name: Install backend dependencies
        run: npm ci
        working-directory: ./backend

      - name: Run backend unit tests
        run: npm run test
        working-directory: ./backend

      - name: Install frontend dependencies
        run: npm ci
        working-directory: ./frontend

      - name: Run frontend unit tests
        run: npm run test
        working-directory: ./frontend

      # === E2E Tests ===

      # - name: Install e2e test dependencies
      #   run: npm ci
      #   working-directory: ./e2e-tests

      # - name: Install Playwright browsers
      #   run: npx playwright install --with-deps chromium
      #   working-directory: ./e2e-tests

      # - name: Create backend .env.e2e file
      #   run: |
      #     echo "SERVER_PORT=${{ secrets.SERVER_PORT }}" >> .env.e2e
      #     echo "CLERK_PUBLISHABLE_KEY=${{ secrets.CLERK_DEV_PUBLISHABLE_KEY }}" >> .env.e2e
      #     echo "CLERK_SECRET_KEY=${{ secrets.CLERK_DEV_SECRET_KEY }}" >> .env.e2e
      #     echo "CLERK_AUTHORIZED_PARTIES=${{ secrets.CLERK_DEV_AUTHORIZED_PARTIES }}" >> .env.e2e
      #     echo "CLERK_TELEMETRY_DISABLED=${{ secrets.CLERK_TELEMETRY_DISABLED }}" >> .env.e2e
      #     echo "CLERK_TELEMETRY_DEBUG=${{ secrets.CLERK_TELEMETRY_DEBUG }}" >> .env.e2e
      #     echo "FRONTEND_URL=http://localhost:5173" >> .env.e2e
      #   working-directory: ./backend

      # - name: Create e2e-tests .env file
      #   run: |
      #     echo "CLERK_PUBLISHABLE_KEY=${{ secrets.CLERK_DEV_PUBLISHABLE_KEY }}" >> .env
      #     echo "CLERK_SECRET_KEY=${{ secrets.CLERK_DEV_SECRET_KEY }}" >> .env
      #     echo "CLERK_USER_EMAIL=${{ secrets.CLERK_USER_EMAIL }}" >> .env
      #     echo "CLERK_USER_PASSWORD=${{ secrets.CLERK_USER_PASSWORD }}" >> .env
      #   working-directory: ./e2e-tests

      # - name: Run e2e tests
      #   run: npx playwright test --project=chromium
      #   working-directory: ./e2e-tests
      #   env:
      #     CI: true
      #     DEBUG: pw:api

      # - name: Upload Playwright test results
      #   if: always()
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: playwright-report
      #     path: e2e-tests/playwright-report/
      #     retention-days: 5

      # === Builds ===

      - name: Build backend
        run: npm run build
        working-directory: ./backend

      - name: Create backend .env file for deployment
        run: |
          echo "SERVER_PORT=${{ secrets.SERVER_PORT }}" >> .env
          echo "MONGO_DB_CONNECTION_STRING=${{ secrets.MONGO_DB_CONNECTION_STRING }}" >> .env
          echo "CLERK_PUBLISHABLE_KEY=${{ secrets.CLERK_PROD_PUBLISHABLE_KEY }}" >> .env
          echo "CLERK_SECRET_KEY=${{ secrets.CLERK_PROD_SECRET_KEY }}" >> .env
          echo "CLERK_AUTHORIZED_PARTIES=https://janban.dev,https://www.janban.dev" >> .env
          echo "CLERK_TELEMETRY_DISABLED=${{ secrets.CLERK_TELEMETRY_DISABLED }}" >> .env
          echo "CLERK_TELEMETRY_DEBUG=${{ secrets.CLERK_TELEMETRY_DEBUG }}" >> .env
          echo "FRONTEND_URL=https://janban.dev" >> .env
        working-directory: ./backend

      - name: Build frontend
        run: npm run build
        working-directory: ./frontend
        env:
          VITE_API_BASE_URL: https://janban.dev
          VITE_CLERK_PUBLISHABLE_KEY: ${{ secrets.VITE_CLERK_PUBLISHABLE_KEY }}
          VITE_CLERK_SIGN_IN_URL: /sign-in
          VITE_CLERK_SIGN_UP_URL: /register
          VITE_CLERK_SIGN_IN_FALLBACK_REDIRECT_URL: /auth-redirect
          VITE_CLERK_SIGN_UP_FALLBACK_REDIRECT_URL: /auth-redirect

      # === EC2 Deployment ===

      - name: Archive build artifacts
        run: |
          mkdir -p artifacts/frontend
          mkdir -p artifacts/backend

          cp -r frontend/dist/* artifacts/frontend/
          cp -r backend/dist/* artifacts/backend/
          cp backend/.env artifacts/backend/.env
          cp backend/package.json artifacts/backend/package.json
          cp backend/package-lock.json artifacts/backend/package-lock.json

      - name: Upload artifacts to EC2
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "artifacts"
          target: "/home/${{ secrets.EC2_USER }}/janban-deploy"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "=== Running deployment script ==="
            sudo /usr/local/bin/deploy-janban.sh ${{ secrets.EC2_USER }}
            echo "=== Application deployed and restarted ==="
